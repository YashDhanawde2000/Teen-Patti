//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""0757fd30-87e5-4520-bfcf-f1d80c265a34"",
            ""actions"": [
                {
                    ""name"": ""See"",
                    ""type"": ""Button"",
                    ""id"": ""0f6595eb-eb9b-467b-b981-0db8feaff881"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Call"",
                    ""type"": ""Button"",
                    ""id"": ""3f61dd98-c029-4b61-a075-fc93d0667b04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Raise"",
                    ""type"": ""Button"",
                    ""id"": ""eda5fba7-67e5-450c-9a2e-246251e6e5f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fold"",
                    ""type"": ""Button"",
                    ""id"": ""a5f227a1-116a-4d8d-b318-4fc979c3be61"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sideshow"",
                    ""type"": ""Button"",
                    ""id"": ""15d372cd-781f-4058-9a3d-d290d332a21e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchCam"",
                    ""type"": ""Button"",
                    ""id"": ""d2a44125-328f-49d7-931f-35c22b11c786"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Accept"",
                    ""type"": ""Button"",
                    ""id"": ""8a29be25-92f0-41da-8f6d-e75842f20290"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Decline"",
                    ""type"": ""Button"",
                    ""id"": ""3aade158-0c2a-462b-aec3-35b911b6db5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b3b18837-1789-41a5-af81-0dfd51826c00"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""See"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba581b9f-8332-41a8-9301-ff8a70c82108"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Call"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c99050ba-0e99-49b8-afe9-e6618ff17b95"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Raise"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1017ef0-4133-4840-9336-c7573ebccd2e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c2cddd4-41f8-41a9-9449-7a121d90ff55"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""edfd8223-5b63-47b7-a4e6-1c41ea138fdc"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sideshow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6347dd94-771f-4f7e-bfee-04f2ddc449f4"",
                    ""path"": ""<Keyboard>/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""11d357a8-2dc3-47c9-8d2a-9cbd62db571d"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Decline"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_See = m_Player.FindAction("See", throwIfNotFound: true);
        m_Player_Call = m_Player.FindAction("Call", throwIfNotFound: true);
        m_Player_Raise = m_Player.FindAction("Raise", throwIfNotFound: true);
        m_Player_Fold = m_Player.FindAction("Fold", throwIfNotFound: true);
        m_Player_Sideshow = m_Player.FindAction("Sideshow", throwIfNotFound: true);
        m_Player_SwitchCam = m_Player.FindAction("SwitchCam", throwIfNotFound: true);
        m_Player_Accept = m_Player.FindAction("Accept", throwIfNotFound: true);
        m_Player_Decline = m_Player.FindAction("Decline", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_See;
    private readonly InputAction m_Player_Call;
    private readonly InputAction m_Player_Raise;
    private readonly InputAction m_Player_Fold;
    private readonly InputAction m_Player_Sideshow;
    private readonly InputAction m_Player_SwitchCam;
    private readonly InputAction m_Player_Accept;
    private readonly InputAction m_Player_Decline;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @See => m_Wrapper.m_Player_See;
        public InputAction @Call => m_Wrapper.m_Player_Call;
        public InputAction @Raise => m_Wrapper.m_Player_Raise;
        public InputAction @Fold => m_Wrapper.m_Player_Fold;
        public InputAction @Sideshow => m_Wrapper.m_Player_Sideshow;
        public InputAction @SwitchCam => m_Wrapper.m_Player_SwitchCam;
        public InputAction @Accept => m_Wrapper.m_Player_Accept;
        public InputAction @Decline => m_Wrapper.m_Player_Decline;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @See.started += instance.OnSee;
            @See.performed += instance.OnSee;
            @See.canceled += instance.OnSee;
            @Call.started += instance.OnCall;
            @Call.performed += instance.OnCall;
            @Call.canceled += instance.OnCall;
            @Raise.started += instance.OnRaise;
            @Raise.performed += instance.OnRaise;
            @Raise.canceled += instance.OnRaise;
            @Fold.started += instance.OnFold;
            @Fold.performed += instance.OnFold;
            @Fold.canceled += instance.OnFold;
            @Sideshow.started += instance.OnSideshow;
            @Sideshow.performed += instance.OnSideshow;
            @Sideshow.canceled += instance.OnSideshow;
            @SwitchCam.started += instance.OnSwitchCam;
            @SwitchCam.performed += instance.OnSwitchCam;
            @SwitchCam.canceled += instance.OnSwitchCam;
            @Accept.started += instance.OnAccept;
            @Accept.performed += instance.OnAccept;
            @Accept.canceled += instance.OnAccept;
            @Decline.started += instance.OnDecline;
            @Decline.performed += instance.OnDecline;
            @Decline.canceled += instance.OnDecline;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @See.started -= instance.OnSee;
            @See.performed -= instance.OnSee;
            @See.canceled -= instance.OnSee;
            @Call.started -= instance.OnCall;
            @Call.performed -= instance.OnCall;
            @Call.canceled -= instance.OnCall;
            @Raise.started -= instance.OnRaise;
            @Raise.performed -= instance.OnRaise;
            @Raise.canceled -= instance.OnRaise;
            @Fold.started -= instance.OnFold;
            @Fold.performed -= instance.OnFold;
            @Fold.canceled -= instance.OnFold;
            @Sideshow.started -= instance.OnSideshow;
            @Sideshow.performed -= instance.OnSideshow;
            @Sideshow.canceled -= instance.OnSideshow;
            @SwitchCam.started -= instance.OnSwitchCam;
            @SwitchCam.performed -= instance.OnSwitchCam;
            @SwitchCam.canceled -= instance.OnSwitchCam;
            @Accept.started -= instance.OnAccept;
            @Accept.performed -= instance.OnAccept;
            @Accept.canceled -= instance.OnAccept;
            @Decline.started -= instance.OnDecline;
            @Decline.performed -= instance.OnDecline;
            @Decline.canceled -= instance.OnDecline;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnSee(InputAction.CallbackContext context);
        void OnCall(InputAction.CallbackContext context);
        void OnRaise(InputAction.CallbackContext context);
        void OnFold(InputAction.CallbackContext context);
        void OnSideshow(InputAction.CallbackContext context);
        void OnSwitchCam(InputAction.CallbackContext context);
        void OnAccept(InputAction.CallbackContext context);
        void OnDecline(InputAction.CallbackContext context);
    }
}
